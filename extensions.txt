STARIS Project Next Steps

--Security and hosting:

Currently when a user enters their API and API Secret keys, the client (frontend) passes them to the server (backend) through the fetch URL. This can be considered insecure. 
When hosting the application, should aim to use TLS or mTLS to encrypt data between the client and server. May need a certificate.
When implementing the monthly report feature, need a secure way of storing the emails (e.g. an encrypted database).

Think about CSRF and XSS attacks.

--Frontend:

If needed split App.css into different CSS files. Add logic to send emails from frontend to backend. In the comparison page, add ability to provide API and API secret of comparing institution for better comparisons. 

--Backend:

Extend institution features to ORCID. Implement monthly reports using flask-scheduler or something else.

--Issues to explore:

Running the website on eduroam